<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Symfony | Lumbendil's Blog]]></title>
  <link href="http://Lumbendil.github.io/blog/categories/symfony/atom.xml" rel="self"/>
  <link href="http://Lumbendil.github.io/"/>
  <updated>2013-10-15T22:32:44+00:00</updated>
  <id>http://Lumbendil.github.io/</id>
  <author>
    <name><![CDATA[Roger Llopart Pla]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Symfony Basics: Events]]></title>
    <link href="http://Lumbendil.github.io/blog/2013/10/16/symfony-basics-events/"/>
    <updated>2013-10-16T00:31:00+00:00</updated>
    <id>http://Lumbendil.github.io/blog/2013/10/16/symfony-basics-events</id>
    <content type="html"><![CDATA[<p>In this new post I&rsquo;ll talk about a Symfony component which is used to help you users easily hook into the flow of your code. This is done by the <a href="https://github.com/symfony/EventDispatcher">EventDispatcher</a>.</p>

<h3>Why do I need events?</h3>

<p>Event dispatching allows you to develop a library which can easily be adapted by it&rsquo;s users for their own needs. For instance, they can log certain actions when they happen, or can modify an object before you use it. I will show how this is done with the EventDispatcher component in the next section.</p>

<h3>Using the EventDispatcher component</h3>

<p>So, if the reasoning behind why you should use event dispatching convinced you, let&rsquo;s see how this is used. All the code used here is available in my <a href="https://github.com/Lumbendil/EventDispatcherExample">event dispatcher example github repository</a>.</p>

<p>What we will do is a fake mailer, which will be given a list of users and send each of them a text. Instead of sending emails, we&rsquo;ll print the email which would be sent through the screen.</p>

<p>So, the first thing we need to do is create the mailer class.</p>

<p>```php
class WelcomeMailer
{</p>

<pre><code>/**
 * @param string[] $emails An array of emails.
 */
public function sendEmails(array $emails)
{
    foreach ($emails as $email) {
        $this-&gt;sendEmail($email);
    }
}

/**
 * @param string $email The email of the user.
 * @return bool True if the email was sent successfully,
 *  false otherwise.
 */
private function sendEmail($email)
{
    $message = "Welcome $email";
    echo "Sending message to $email: $message", PHP_EOL;
    return true;
}
</code></pre>

<p>}</p>

<p>$mailer = new WelcomeMailer();
$emails = array(</p>

<pre><code>'bob@example.com',
'alice@example.com',
</code></pre>

<p>);
$mailer->sendEmails($emails);
```</p>

<p>It&rsquo;s a really nice and simple class, and, if it actually sent emails and sent a more elaborate email, it could be useful for some people. But someone could, for instance, need to send a special email to some users, need to know how many successful and unsuccessful emails happened and log that, etc. Even though this can be accomplished in several ways, we&rsquo;ll show how to do it with events.</p>

<p>First of, we need the mailer to depend on the event dispatcher. If the welcome mailer was a service in your application, this could be done using <a href="lumbendil.github.io/blog/2013/10/02/symfony-bases-services/">dependency injection</a>.</p>

<p>```php
use Symfony\Component\EventDispatcher\EventDispatcherInterface;
use Symfony\Component\EventDispatcher\EventDispatcher;</p>

<p>class WelcomeMailer
{</p>

<pre><code>private $eventDispatcher;

public function __construct(EventDispatcherInterface $eventDispatcher)
{
    $this-&gt;eventDispatcher = $eventDispatcher;
}

// ...
</code></pre>

<p>}</p>

<p>$dispatcher = new EventDispatcher();
$mailer = new WelcomeMailer($dispatcher);</p>

<p>// &hellip;
```</p>

<p>So, once we have the event dispatcher in place, it&rsquo;s time for us to start dispatching events. To ease this up, we&rsquo;ll use the class GenericEvent, to avoid having to write to many classes. Even though, it&rsquo;d be better to have a class for each event.</p>

<p>```php
use Symfony\Component\EventDispatcher\GenericEvent;</p>

<p>// &hellip;</p>

<pre><code>public function sendEmails(array $emails)
{
    $this-&gt;eventDispatcher-&gt;dispatch('welcome_mailer.mailer_start');

    foreach ($emails as $email) {
        $event = new GenericEvent();
        $event['email'] = $email;

        if ($this-&gt;sendEmail($email)) {
            $this-&gt;eventDispatcher-&gt;dispatch('welcome_mailer.send_successful', $event);
        } else {
            $this-&gt;eventDispatcher-&gt;dispatch('welcome_mailer.send_failed', $event);
        }
    }

    $this-&gt;eventDispatcher-&gt;dispatch('welcome_mailer.mailer_end');
}

/**
 * @param string $email The email of the user.
 * @return bool True if the email was sent successfully,
 *  false otherwise.
 */
private function sendEmail($email)
{
    $message = "Welcome $email";

    $event = new GenericEvent();
    $event['email'] = $email;
    $event['message'] = $message;

    $this-&gt;dispatcher-&gt;eventDispatcher('welcome_mailer.mail_prepared', $event);
    $message = $event['message'];

    echo "Sending message to $email: $message", PHP_EOL;
    return true;
}
</code></pre>

<p>```</p>

<p>So now, we have added five events. The <code>mailer_start</code>, <code>mailer_end</code>, <code>send_successful</code>, <code>send_failed</code> and <code>mail_prepared</code> events. We have an object which represents the event, and is used to communicate things between the event dispatcher and the library. So, let&rsquo;s see how could we use this events. Let&rsquo;s see how we can use this events to handle the couple of examples we mentioned earlier.</p>

<p>A simple example would be to customize the message we are sending to <code>alice@example.com</code>, so it says <code>Hi Alice.</code>.</p>

<p>```php
class AliceEmailListener
{</p>

<pre><code>public function changeAliceMessage(GenericEvent $event)
{
    if ($event['email'] == 'alice@example.com') {
        $event['message'] = 'Hi Alice.';
    }
}
</code></pre>

<p>}</p>

<p>$dispatcher->addListener(&lsquo;welcome_mailer.mail_prepared&rsquo;, array(new AliceEmailListener(), &lsquo;changeAliceMessage&rsquo;));
```</p>

<p>So, we have implemented a listener, which listens to the mail prepared event, and when it is triggered, it&rsquo;ll change the message if it&rsquo;s Alice&rsquo;s email. The listener here has been given as an array of an object and a function name, but it will work as long as it&rsquo;s a valid callable.</p>

<p>For the next part, counting successful and failed emails, we&rsquo;ll use a subscriber. A subscriber is a class which implements a given interface, the <code>EventSubscriberInterface</code>, which has a method to get all the events the subscriber wants to be notified at.</p>

<p>```php
use Symfony\Component\EventDispatcher\GenericEvent;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;</p>

<p>class EmailCountSubscriber implements EventSubscriberInterface
{</p>

<pre><code>private $successes;
private $failures;

public static function getSubscribedEvents()
{
    return array(
        'welcome_mailer.mailer_start' =&gt; 'resetCounters',
        'welcome_mailer.mailer_end' =&gt; 'printCounters',
        'welcome_mailer.send_successful' =&gt; 'countSuccess',
        'welcome_mailer.send_failed' =&gt; 'countFailure',
    );
}

public function resetCounters()
{
    $this-&gt;successes = $this-&gt;failures = 0;
}

public function countSuccess()
{
    $this-&gt;successes++;
}

public function countFailuer()
{
    $this-&gt;failures++;
}

public function printCounters()
{
    echo "Mailing ended. Successes: {$this-&gt;successes}. Failures: {$this-&gt;failures}.", PHP_EOL;
}
</code></pre>

<p>}</p>

<p>$dispatcher->addSubscriber(new EmailCountSubscriber());
```</p>

<h3>Conclusion</h3>

<p>There are some things I haven&rsquo;t covered in this post, such as priorities and stopping event propagation. In order to look more onto it, you should go to <a href="http://symfony.com/doc/current/components/event_dispatcher/index.html">the component documentation</a>.</p>
]]></content>
  </entry>
  
</feed>
